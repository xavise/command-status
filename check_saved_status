#!/bin/sh

# Check status of previously executed command, saved in given directory.
# Output (stdout and stderr) is printed as is.
# Command exits with saved exit status.



PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin



usage () {
	cat <<E-O-F 1>&2
Usage: $0 [options] {status_dir}
Valid options are:
  --purge    Delete saved status files
  --quiet    Do not output anything, just exit with saved exit status
E-O-F
	exit 1
}



get_options () {
	ARGS=`getopt -n "$0" -o pq --long purge,quiet -- "$@"`
	[ $? -eq 0 ] || usage

	PURGE=
	QUIET=
	eval set -- "$ARGS"
	while true ; do
		case "$1" in
			-p|--purge)
				PURGE=1
				shift
				;;
			-q|--quiet)
				QUIET=1
				shift
				;;
			--)
				shift
				break
				;;
			*)
				usage
				# NOTREACHED
				;;
		esac
	done

	case $# in
		1)
			STATUS_DIR="$1"
			shift
			;;
		*)
			usage
			# NOTREACHED
			;;
	esac
}



check_status_dir () {
	[ -d "$STATUS_DIR" ] \
		&& [ -L "$STATUS_DIR/cmdline" ] \
		&& [ -r "$STATUS_DIR/stdout"  ] \
		&& [ -r "$STATUS_DIR/stderr"  ] \
		&& [ -L "$STATUS_DIR/status"  ] \
		&& return 0

	echo "$0: Invalid status directory '$STATUS_DIR'" 1>&2
	exit 1
}



purge_status_dir () {
	rm -f "$STATUS_DIR/cmdline" \
	      "$STATUS_DIR/stdout"  \
	      "$STATUS_DIR/stderr"  \
	      "$STATUS_DIR/status"
}



get_options "$@"
check_status_dir "$STATUS_DIR"

if [ -z "$QUIET" ]; then
	cat "$STATUS_DIR/stderr" 1>&2
	cat "$STATUS_DIR/stdout"
fi

STATUS=`readlink -n "$STATUS_DIR/status"`
[ -n "$PURGE" ] && purge_status_dir

if [ "$STATUS" = 'undef' ]; then
	# Execution may still be in progress, or exit status might not
	# be correctly set.
	[ -z "$QUIET" ] && echo "$0: Undefined saved status in '$STATUS_DIR' (execution still in progress?)" 1>&2
	exit 255
fi

exit $STATUS

